{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Rapiduino Rapiduino is a Python library to allow Python code to control an Arduino. The Python code runs on a computer connected to an Arduino through a serial connection. A sketch is provided to upload to the Arduino. The Rapiduino library can be used to connect to the Arduino and send it familiar commands such as digitalWrite and pinMode . By sending these commands from Python and not compiling/uploading directly to the Arduino, you gain the ability to dynamically attach and test components and also have the capability to obtain data from your sensors wiithout having to write any custom Arduino code. You also gain the power of Python's wonderful syntax and libraries. Why use Rapiduino? Rapidly develop using everyone's favourite language \ud83d\ude09 Easily integrate an Arduino with Python's libraries to provide a real-time clock, web access, data visualisation, number crunching etc... Allow hot-swappable parts. Change pin mode, pin state etc. whenever you like from your Python code! Easily obtain data from your Arduino without setting up any custom communication. Probably many other benefits that will become realised as time goes on... Are there any downsides? Of course. Don't use this library if: You are not able to run a computer alongside an Arduino (not even a Raspberry Pi) because of issues such as size, battery, operating conditions etc. You need timing accuracy that Rapiduino does not yet support; For example, for an ultrasonic sensor where the connection lag could cause inaccuracy (although there are workarounds for this for specific components) Probably many others personal to your project...","title":"Home"},{"location":"#rapiduino","text":"Rapiduino is a Python library to allow Python code to control an Arduino. The Python code runs on a computer connected to an Arduino through a serial connection. A sketch is provided to upload to the Arduino. The Rapiduino library can be used to connect to the Arduino and send it familiar commands such as digitalWrite and pinMode . By sending these commands from Python and not compiling/uploading directly to the Arduino, you gain the ability to dynamically attach and test components and also have the capability to obtain data from your sensors wiithout having to write any custom Arduino code. You also gain the power of Python's wonderful syntax and libraries.","title":"Rapiduino"},{"location":"#why-use-rapiduino","text":"Rapidly develop using everyone's favourite language \ud83d\ude09 Easily integrate an Arduino with Python's libraries to provide a real-time clock, web access, data visualisation, number crunching etc... Allow hot-swappable parts. Change pin mode, pin state etc. whenever you like from your Python code! Easily obtain data from your Arduino without setting up any custom communication. Probably many other benefits that will become realised as time goes on...","title":"Why use Rapiduino?"},{"location":"#are-there-any-downsides","text":"Of course. Don't use this library if: You are not able to run a computer alongside an Arduino (not even a Raspberry Pi) because of issues such as size, battery, operating conditions etc. You need timing accuracy that Rapiduino does not yet support; For example, for an ultrasonic sensor where the connection lag could cause inaccuracy (although there are workarounds for this for specific components) Probably many others personal to your project...","title":"Are there any downsides?"},{"location":"quickstart/","text":"Quickstart Installation pip install rapiduino Usage To use with an Arduino Uno, simply import the class and globals as follows. Importing globals give you access to the same INPUT, OUTPUT, HIGH, LOW, A0, A1 etc. as when developing an Arduino sketch from rapiduino.globals.arduino_uno import * from rapiduino.globals.common import * from rapiduino.boards.arduino import Arduino Set up the class and serial connection with the following. The port to be passed in can be identified using the Arduino software arduino = Arduino . uno ( 'port_identifier' ) Then start using it! Here is a blinking LED example: import time while True : arduino . digital_write ( 13 , HIGH ) time . sleep ( 1 ) arduino . digital_write ( 13 , LOW ) time . sleep ( 1 ) You can also use classes for components (such as LEDs) which make using the Arduino easier and less error-prone. The components are \"registered\" to the Arduino along with a pin-mapping which tells the Arduino object which pins are connected to the component. Let's look at an example with an LED: from rapiduino.components.led import LED led = LED ( arduino , 13 ) This creates an LED object and registers it to the arduino against pin 13. When binding, the code automatically takes care of checking compatibility, raising an error if there is a problem. For example, if you are trying to connect a component that requires a PWM pin to a non-PWM pin, you will get a helpful message. You can re-write the blink example as: while True : led . toggle () time . sleep ( 1 ) The benefit of this is that you can use methods with familiar names such as: led . turn_on () led . turn_off () led . toggle () You don't need to think of pin states or pin modes when interacting with your components, and you don't need to keep track of which pin is connected to which component - rapiduino will do that for you.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"pip install rapiduino","title":"Installation"},{"location":"quickstart/#usage","text":"To use with an Arduino Uno, simply import the class and globals as follows. Importing globals give you access to the same INPUT, OUTPUT, HIGH, LOW, A0, A1 etc. as when developing an Arduino sketch from rapiduino.globals.arduino_uno import * from rapiduino.globals.common import * from rapiduino.boards.arduino import Arduino Set up the class and serial connection with the following. The port to be passed in can be identified using the Arduino software arduino = Arduino . uno ( 'port_identifier' ) Then start using it! Here is a blinking LED example: import time while True : arduino . digital_write ( 13 , HIGH ) time . sleep ( 1 ) arduino . digital_write ( 13 , LOW ) time . sleep ( 1 ) You can also use classes for components (such as LEDs) which make using the Arduino easier and less error-prone. The components are \"registered\" to the Arduino along with a pin-mapping which tells the Arduino object which pins are connected to the component. Let's look at an example with an LED: from rapiduino.components.led import LED led = LED ( arduino , 13 ) This creates an LED object and registers it to the arduino against pin 13. When binding, the code automatically takes care of checking compatibility, raising an error if there is a problem. For example, if you are trying to connect a component that requires a PWM pin to a non-PWM pin, you will get a helpful message. You can re-write the blink example as: while True : led . toggle () time . sleep ( 1 ) The benefit of this is that you can use methods with familiar names such as: led . turn_on () led . turn_off () led . toggle () You don't need to think of pin states or pin modes when interacting with your components, and you don't need to keep track of which pin is connected to which component - rapiduino will do that for you.","title":"Usage"},{"location":"suppoted_boards/","text":"Supported Boards Arduino We currently support the Arduino Uno and Arduino Mega 2560. Support for the Arduino Nano is coming very soon.","title":"Supported boards"},{"location":"suppoted_boards/#supported-boards","text":"","title":"Supported Boards"},{"location":"suppoted_boards/#arduino","text":"We currently support the Arduino Uno and Arduino Mega 2560. Support for the Arduino Nano is coming very soon.","title":"Arduino"}]}